      [&] { if (is_dropout) { constexpr bool IsDropoutConst = true; return [&] { [&] { if (has_subset) { constexpr bool HasSubsetConst = true; return [&] { [&] { if (is_even_cols) { constexpr bool IsEvenColsConst = true; return [&] { if (has_colscale) { auto kernel = &ln_bwd_kernel<Kernel_traits, IsDropoutConst, true, HasSubsetConst, IsEvenColsConst>; } else { auto kernel = &ln_bwd_kernel<Kernel_traits, IsDropoutConst, false, HasSubsetConst, IsEvenColsConst>; } if( configure_params ) { int ctas_per_sm; { check_cuda_((cudaOccupancyMaxActiveBlocksPerMultiprocessor( &ctas_per_sm, kernel, Kernel_traits::THREADS_PER_CTA, Kernel_traits::SMEM_BYTES)), "D:\\projects\\affect\\TUCORE-GCN\\.venv\\Lib\\site-packages\\layer_norm\\ln_bwd_kernels.cuh", 553); }; launch_params.params.ctas_per_col = launch_params.props->multiProcessorCount * ctas_per_sm / Kernel_traits::CTAS_PER_ROW; launch_params.barrier_size = 0; launch_params.workspace_bytes = 0; if(Kernel_traits::CTAS_PER_ROW > 1) { launch_params.barrier_size = 2 * launch_params.params.ctas_per_col; launch_params.workspace_bytes = launch_params.params.ctas_per_col * Kernel_traits::WARPS_M * Kernel_traits::CTAS_PER_ROW * sizeof(typename Kernel_traits::reduce_t) * 2; } return; } if( Kernel_traits::SMEM_BYTES >= 48 * 1024 ) { { check_cuda_((cudaFuncSetAttribute(kernel, cudaFuncAttributeMaxDynamicSharedMemorySize, Kernel_traits::SMEM_BYTES)), "D:\\projects\\affect\\TUCORE-GCN\\.venv\\Lib\\site-packages\\layer_norm\\ln_bwd_kernels.cuh", 553); }; } auto stream = launch_params.stream; auto ctas_per_col = launch_params.params.ctas_per_col; if( Kernel_traits::CTAS_PER_ROW == 1 ) { kernel<<<ctas_per_col, Kernel_traits::THREADS_PER_CTA, Kernel_traits::SMEM_BYTES, stream>>>(launch_params.params); } else { dim3 grid(Kernel_traits::CTAS_PER_ROW * ctas_per_col); dim3 block(Kernel_traits::THREADS_PER_CTA); void *params_ = (void *)&launch_params.params; cudaLaunchCooperativeKernel((void *)kernel, grid, block, (void **)&params_, Kernel_traits::SMEM_BYTES, stream); } if (has_colscale) { using Kernel_traits_f = layer_norm::Kernel_traits_finalize<HIDDEN_SIZE, weight_t, input_t, residual_t, output_t, compute_t, index_t, true, 32 * 32, BYTES_PER_LDG_FINAL>; auto kernel_f= &layer_norm::ln_bwd_finalize_kernel<Kernel_traits_f, true, IsEvenColsConst>; } else { using Kernel_traits_f = layer_norm::Kernel_traits_finalize<HIDDEN_SIZE, weight_t, input_t, residual_t, output_t, compute_t, index_t, false, 32 * 32, BYTES_PER_LDG_FINAL>; auto kernel_f = &layer_norm::ln_bwd_finalize_kernel<Kernel_traits_f, false, IsEvenColsConst>; } kernel_f<<<Kernel_traits_f::CTAS, Kernel_traits_f::THREADS_PER_CTA, 0, stream>>>(launch_params.params); }(); } else { constexpr bool IsEvenColsConst = false; return [&] { if (has_colscale) { auto kernel = &ln_bwd_kernel<Kernel_traits, IsDropoutConst, true, HasSubsetConst, IsEvenColsConst>; } else { auto kernel = &ln_bwd_kernel<Kernel_traits, IsDropoutConst, false, HasSubsetConst, IsEvenColsConst>; } if( configure_params ) { int ctas_per_sm; { check_cuda_((cudaOccupancyMaxActiveBlocksPerMultiprocessor( &ctas_per_sm, kernel, Kernel_traits::THREADS_PER_CTA, Kernel_traits::SMEM_BYTES)), "D:\\projects\\affect\\TUCORE-GCN\\.venv\\Lib\\site-packages\\layer_norm\\ln_bwd_kernels.cuh", 553); }; launch_params.params.ctas_per_col = launch_params.props->multiProcessorCount * ctas_per_sm / Kernel_traits::CTAS_PER_ROW; launch_params.barrier_size = 0; launch_params.workspace_bytes = 0; if(Kernel_traits::CTAS_PER_ROW > 1) { launch_params.barrier_size = 2 * launch_params.params.ctas_per_col; launch_params.workspace_bytes = launch_params.params.ctas_per_col * Kernel_traits::WARPS_M * Kernel_traits::CTAS_PER_ROW * sizeof(typename Kernel_traits::reduce_t) * 2; } return; } if( Kernel_traits::SMEM_BYTES >= 48 * 1024 ) { { check_cuda_((cudaFuncSetAttribute(kernel, cudaFuncAttributeMaxDynamicSharedMemorySize, Kernel_traits::SMEM_BYTES)), "D:\\projects\\affect\\TUCORE-GCN\\.venv\\Lib\\site-packages\\layer_norm\\ln_bwd_kernels.cuh", 553); }; } auto stream = launch_params.stream; auto ctas_per_col = launch_params.params.ctas_per_col; if( Kernel_traits::CTAS_PER_ROW == 1 ) { kernel<<<ctas_per_col, Kernel_traits::THREADS_PER_CTA, Kernel_traits::SMEM_BYTES, stream>>>(launch_params.params); } else { dim3 grid(Kernel_traits::CTAS_PER_ROW * ctas_per_col); dim3 block(Kernel_traits::THREADS_PER_CTA); void *params_ = (void *)&launch_params.params; cudaLaunchCooperativeKernel((void *)kernel, grid, block, (void **)&params_, Kernel_traits::SMEM_BYTES, stream); } if (has_colscale) { using Kernel_traits_f = layer_norm::Kernel_traits_finalize<HIDDEN_SIZE, weight_t, input_t, residual_t, output_t, compute_t, index_t, true, 32 * 32, BYTES_PER_LDG_FINAL>; auto kernel_f= &layer_norm::ln_bwd_finalize_kernel<Kernel_traits_f, true, IsEvenColsConst>; } else { using Kernel_traits_f = layer_norm::Kernel_traits_finalize<HIDDEN_SIZE, weight_t, input_t, residual_t, output_t, compute_t, index_t, false, 32 * 32, BYTES_PER_LDG_FINAL>; auto kernel_f = &layer_norm::ln_bwd_finalize_kernel<Kernel_traits_f, false, IsEvenColsConst>; } kernel_f<<<Kernel_traits_f::CTAS, Kernel_traits_f::THREADS_PER_CTA, 0, stream>>>(launch_params.params); }(); } }(); }(); } else { constexpr bool HasSubsetConst = false; return [&] { [&] { if (is_even_cols) { constexpr bool IsEvenColsConst = true; return [&] { if (has_colscale) { auto kernel = &ln_bwd_kernel<Kernel_traits, IsDropoutConst, true, HasSubsetConst, IsEvenColsConst>; } else { auto kernel = &ln_bwd_kernel<Kernel_traits, IsDropoutConst, false, HasSubsetConst, IsEvenColsConst>; } if( configure_params ) { int ctas_per_sm; { check_cuda_((cudaOccupancyMaxActiveBlocksPerMultiprocessor( &ctas_per_sm, kernel, Kernel_traits::THREADS_PER_CTA, Kernel_traits::SMEM_BYTES)), "D:\\projects\\affect\\TUCORE-GCN\\.venv\\Lib\\site-packages\\layer_norm\\ln_bwd_kernels.cuh", 553); }; launch_params.params.ctas_per_col = launch_params.props->multiProcessorCount * ctas_per_sm / Kernel_traits::CTAS_PER_ROW; launch_params.barrier_size = 0; launch_params.workspace_bytes = 0; if(Kernel_traits::CTAS_PER_ROW > 1) { launch_params.barrier_size = 2 * launch_params.params.ctas_per_col; launch_params.workspace_bytes = launch_params.params.ctas_per_col * Kernel_traits::WARPS_M * Kernel_traits::CTAS_PER_ROW * sizeof(typename Kernel_traits::reduce_t) * 2; } return; } if( Kernel_traits::SMEM_BYTES >= 48 * 1024 ) { { check_cuda_((cudaFuncSetAttribute(kernel, cudaFuncAttributeMaxDynamicSharedMemorySize, Kernel_traits::SMEM_BYTES)), "D:\\projects\\affect\\TUCORE-GCN\\.venv\\Lib\\site-packages\\layer_norm\\ln_bwd_kernels.cuh", 553); }; } auto stream = launch_params.stream; auto ctas_per_col = launch_params.params.ctas_per_col; if( Kernel_traits::CTAS_PER_ROW == 1 ) { kernel<<<ctas_per_col, Kernel_traits::THREADS_PER_CTA, Kernel_traits::SMEM_BYTES, stream>>>(launch_params.params); } else { dim3 grid(Kernel_traits::CTAS_PER_ROW * ctas_per_col); dim3 block(Kernel_traits::THREADS_PER_CTA); void *params_ = (void *)&launch_params.params; cudaLaunchCooperativeKernel((void *)kernel, grid, block, (void **)&params_, Kernel_traits::SMEM_BYTES, stream); } if (has_colscale) { using Kernel_traits_f = layer_norm::Kernel_traits_finalize<HIDDEN_SIZE, weight_t, input_t, residual_t, output_t, compute_t, index_t, true, 32 * 32, BYTES_PER_LDG_FINAL>; auto kernel_f= &layer_norm::ln_bwd_finalize_kernel<Kernel_traits_f, true, IsEvenColsConst>; } else { using Kernel_traits_f = layer_norm::Kernel_traits_finalize<HIDDEN_SIZE, weight_t, input_t, residual_t, output_t, compute_t, index_t, false, 32 * 32, BYTES_PER_LDG_FINAL>; auto kernel_f = &layer_norm::ln_bwd_finalize_kernel<Kernel_traits_f, false, IsEvenColsConst>; } kernel_f<<<Kernel_traits_f::CTAS, Kernel_traits_f::THREADS_PER_CTA, 0, stream>>>(launch_params.params); }(); } else { constexpr bool IsEvenColsConst = false; return [&] { if (has_colscale) { auto kernel = &ln_bwd_kernel<Kernel_traits, IsDropoutConst, true, HasSubsetConst, IsEvenColsConst>; } else { auto kernel = &ln_bwd_kernel<Kernel_traits, IsDropoutConst, false, HasSubsetConst, IsEvenColsConst>; } if( configure_params ) { int ctas_per_sm; { check_cuda_((cudaOccupancyMaxActiveBlocksPerMultiprocessor( &ctas_per_sm, kernel, Kernel_traits::THREADS_PER_CTA, Kernel_traits::SMEM_BYTES)), "D:\\projects\\affect\\TUCORE-GCN\\.venv\\Lib\\site-packages\\layer_norm\\ln_bwd_kernels.cuh", 553); }; launch_params.params.ctas_per_col = launch_params.props->multiProcessorCount * ctas_per_sm / Kernel_traits::CTAS_PER_ROW; launch_params.barrier_size = 0; launch_params.workspace_bytes = 0; if(Kernel_traits::CTAS_PER_ROW > 1) { launch_params.barrier_size = 2 * launch_params.params.ctas_per_col; launch_params.workspace_bytes = launch_params.params.ctas_per_col * Kernel_traits::WARPS_M * Kernel_traits::CTAS_PER_ROW * sizeof(typename Kernel_traits::reduce_t) * 2; } return; } if( Kernel_traits::SMEM_BYTES >= 48 * 1024 ) { { check_cuda_((cudaFuncSetAttribute(kernel, cudaFuncAttributeMaxDynamicSharedMemorySize, Kernel_traits::SMEM_BYTES)), "D:\\projects\\affect\\TUCORE-GCN\\.venv\\Lib\\site-packages\\layer_norm\\ln_bwd_kernels.cuh", 553); }; } auto stream = launch_params.stream; auto ctas_per_col = launch_params.params.ctas_per_col; if( Kernel_traits::CTAS_PER_ROW == 1 ) { kernel<<<ctas_per_col, Kernel_traits::THREADS_PER_CTA, Kernel_traits::SMEM_BYTES, stream>>>(launch_params.params); } else { dim3 grid(Kernel_traits::CTAS_PER_ROW * ctas_per_col); dim3 block(Kernel_traits::THREADS_PER_CTA); void *params_ = (void *)&launch_params.params; cudaLaunchCooperativeKernel((void *)kernel, grid, block, (void **)&params_, Kernel_traits::SMEM_BYTES, stream); } if (has_colscale) { using Kernel_traits_f = layer_norm::Kernel_traits_finalize<HIDDEN_SIZE, weight_t, input_t, residual_t, output_t, compute_t, index_t, true, 32 * 32, BYTES_PER_LDG_FINAL>; auto kernel_f= &layer_norm::ln_bwd_finalize_kernel<Kernel_traits_f, true, IsEvenColsConst>; } else { using Kernel_traits_f = layer_norm::Kernel_traits_finalize<HIDDEN_SIZE, weight_t, input_t, residual_t, output_t, compute_t, index_t, false, 32 * 32, BYTES_PER_LDG_FINAL>; auto kernel_f = &layer_norm::ln_bwd_finalize_kernel<Kernel_traits_f, false, IsEvenColsConst>; } kernel_f<<<Kernel_traits_f::CTAS, Kernel_traits_f::THREADS_PER_CTA, 0, stream>>>(launch_params.params); }(); } }(); }(); } }(); }(); } else { constexpr bool IsDropoutConst = false; return [&] { [&] { if (has_subset) { constexpr bool HasSubsetConst = true; return [&] { [&] { if (is_even_cols) { constexpr bool IsEvenColsConst = true; return [&] { if (has_colscale) { auto kernel = &ln_bwd_kernel<Kernel_traits, IsDropoutConst, true, HasSubsetConst, IsEvenColsConst>; } else { auto kernel = &ln_bwd_kernel<Kernel_traits, IsDropoutConst, false, HasSubsetConst, IsEvenColsConst>; } if( configure_params ) { int ctas_per_sm; { check_cuda_((cudaOccupancyMaxActiveBlocksPerMultiprocessor( &ctas_per_sm, kernel, Kernel_traits::THREADS_PER_CTA, Kernel_traits::SMEM_BYTES)), "D:\\projects\\affect\\TUCORE-GCN\\.venv\\Lib\\site-packages\\layer_norm\\ln_bwd_kernels.cuh", 553); }; launch_params.params.ctas_per_col = launch_params.props->multiProcessorCount * ctas_per_sm / Kernel_traits::CTAS_PER_ROW; launch_params.barrier_size = 0; launch_params.workspace_bytes = 0; if(Kernel_traits::CTAS_PER_ROW > 1) { launch_params.barrier_size = 2 * launch_params.params.ctas_per_col; launch_params.workspace_bytes = launch_params.params.ctas_per_col * Kernel_traits::WARPS_M * Kernel_traits::CTAS_PER_ROW * sizeof(typename Kernel_traits::reduce_t) * 2; } return; } if( Kernel_traits::SMEM_BYTES >= 48 * 1024 ) { { check_cuda_((cudaFuncSetAttribute(kernel, cudaFuncAttributeMaxDynamicSharedMemorySize, Kernel_traits::SMEM_BYTES)), "D:\\projects\\affect\\TUCORE-GCN\\.venv\\Lib\\site-packages\\layer_norm\\ln_bwd_kernels.cuh", 553); }; } auto stream = launch_params.stream; auto ctas_per_col = launch_params.params.ctas_per_col; if( Kernel_traits::CTAS_PER_ROW == 1 ) { kernel<<<ctas_per_col, Kernel_traits::THREADS_PER_CTA, Kernel_traits::SMEM_BYTES, stream>>>(launch_params.params); } else { dim3 grid(Kernel_traits::CTAS_PER_ROW * ctas_per_col); dim3 block(Kernel_traits::THREADS_PER_CTA); void *params_ = (void *)&launch_params.params; cudaLaunchCooperativeKernel((void *)kernel, grid, block, (void **)&params_, Kernel_traits::SMEM_BYTES, stream); } if (has_colscale) { using Kernel_traits_f = layer_norm::Kernel_traits_finalize<HIDDEN_SIZE, weight_t, input_t, residual_t, output_t, compute_t, index_t, true, 32 * 32, BYTES_PER_LDG_FINAL>; auto kernel_f= &layer_norm::ln_bwd_finalize_kernel<Kernel_traits_f, true, IsEvenColsConst>; } else { using Kernel_traits_f = layer_norm::Kernel_traits_finalize<HIDDEN_SIZE, weight_t, input_t, residual_t, output_t, compute_t, index_t, false, 32 * 32, BYTES_PER_LDG_FINAL>; auto kernel_f = &layer_norm::ln_bwd_finalize_kernel<Kernel_traits_f, false, IsEvenColsConst>; } kernel_f<<<Kernel_traits_f::CTAS, Kernel_traits_f::THREADS_PER_CTA, 0, stream>>>(launch_params.params); }(); } else { constexpr bool IsEvenColsConst = false; return [&] { if (has_colscale) { auto kernel = &ln_bwd_kernel<Kernel_traits, IsDropoutConst, true, HasSubsetConst, IsEvenColsConst>; } else { auto kernel = &ln_bwd_kernel<Kernel_traits, IsDropoutConst, false, HasSubsetConst, IsEvenColsConst>; } if( configure_params ) { int ctas_per_sm; { check_cuda_((cudaOccupancyMaxActiveBlocksPerMultiprocessor( &ctas_per_sm, kernel, Kernel_traits::THREADS_PER_CTA, Kernel_traits::SMEM_BYTES)), "D:\\projects\\affect\\TUCORE-GCN\\.venv\\Lib\\site-packages\\layer_norm\\ln_bwd_kernels.cuh", 553); }; launch_params.params.ctas_per_col = launch_params.props->multiProcessorCount * ctas_per_sm / Kernel_traits::CTAS_PER_ROW; launch_params.barrier_size = 0; launch_params.workspace_bytes = 0; if(Kernel_traits::CTAS_PER_ROW > 1) { launch_params.barrier_size = 2 * launch_params.params.ctas_per_col; launch_params.workspace_bytes = launch_params.params.ctas_per_col * Kernel_traits::WARPS_M * Kernel_traits::CTAS_PER_ROW * sizeof(typename Kernel_traits::reduce_t) * 2; } return; } if( Kernel_traits::SMEM_BYTES >= 48 * 1024 ) { { check_cuda_((cudaFuncSetAttribute(kernel, cudaFuncAttributeMaxDynamicSharedMemorySize, Kernel_traits::SMEM_BYTES)), "D:\\projects\\affect\\TUCORE-GCN\\.venv\\Lib\\site-packages\\layer_norm\\ln_bwd_kernels.cuh", 553); }; } auto stream = launch_params.stream; auto ctas_per_col = launch_params.params.ctas_per_col; if( Kernel_traits::CTAS_PER_ROW == 1 ) { kernel<<<ctas_per_col, Kernel_traits::THREADS_PER_CTA, Kernel_traits::SMEM_BYTES, stream>>>(launch_params.params); } else { dim3 grid(Kernel_traits::CTAS_PER_ROW * ctas_per_col); dim3 block(Kernel_traits::THREADS_PER_CTA); void *params_ = (void *)&launch_params.params; cudaLaunchCooperativeKernel((void *)kernel, grid, block, (void **)&params_, Kernel_traits::SMEM_BYTES, stream); } if (has_colscale) { using Kernel_traits_f = layer_norm::Kernel_traits_finalize<HIDDEN_SIZE, weight_t, input_t, residual_t, output_t, compute_t, index_t, true, 32 * 32, BYTES_PER_LDG_FINAL>; auto kernel_f= &layer_norm::ln_bwd_finalize_kernel<Kernel_traits_f, true, IsEvenColsConst>; } else { using Kernel_traits_f = layer_norm::Kernel_traits_finalize<HIDDEN_SIZE, weight_t, input_t, residual_t, output_t, compute_t, index_t, false, 32 * 32, BYTES_PER_LDG_FINAL>; auto kernel_f = &layer_norm::ln_bwd_finalize_kernel<Kernel_traits_f, false, IsEvenColsConst>; } kernel_f<<<Kernel_traits_f::CTAS, Kernel_traits_f::THREADS_PER_CTA, 0, stream>>>(launch_params.params); }(); } }(); }(); } else { constexpr bool HasSubsetConst = false; return [&] { [&] { if (is_even_cols) { constexpr bool IsEvenColsConst = true; return [&] { if (has_colscale) { auto kernel = &ln_bwd_kernel<Kernel_traits, IsDropoutConst, true, HasSubsetConst, IsEvenColsConst>; } else { auto kernel = &ln_bwd_kernel<Kernel_traits, IsDropoutConst, false, HasSubsetConst, IsEvenColsConst>; } if( configure_params ) { int ctas_per_sm; { check_cuda_((cudaOccupancyMaxActiveBlocksPerMultiprocessor( &ctas_per_sm, kernel, Kernel_traits::THREADS_PER_CTA, Kernel_traits::SMEM_BYTES)), "D:\\projects\\affect\\TUCORE-GCN\\.venv\\Lib\\site-packages\\layer_norm\\ln_bwd_kernels.cuh", 553); }; launch_params.params.ctas_per_col = launch_params.props->multiProcessorCount * ctas_per_sm / Kernel_traits::CTAS_PER_ROW; launch_params.barrier_size = 0; launch_params.workspace_bytes = 0; if(Kernel_traits::CTAS_PER_ROW > 1) { launch_params.barrier_size = 2 * launch_params.params.ctas_per_col; launch_params.workspace_bytes = launch_params.params.ctas_per_col * Kernel_traits::WARPS_M * Kernel_traits::CTAS_PER_ROW * sizeof(typename Kernel_traits::reduce_t) * 2; } return; } if( Kernel_traits::SMEM_BYTES >= 48 * 1024 ) { { check_cuda_((cudaFuncSetAttribute(kernel, cudaFuncAttributeMaxDynamicSharedMemorySize, Kernel_traits::SMEM_BYTES)), "D:\\projects\\affect\\TUCORE-GCN\\.venv\\Lib\\site-packages\\layer_norm\\ln_bwd_kernels.cuh", 553); }; } auto stream = launch_params.stream; auto ctas_per_col = launch_params.params.ctas_per_col; if( Kernel_traits::CTAS_PER_ROW == 1 ) { kernel<<<ctas_per_col, Kernel_traits::THREADS_PER_CTA, Kernel_traits::SMEM_BYTES, stream>>>(launch_params.params); } else { dim3 grid(Kernel_traits::CTAS_PER_ROW * ctas_per_col); dim3 block(Kernel_traits::THREADS_PER_CTA); void *params_ = (void *)&launch_params.params; cudaLaunchCooperativeKernel((void *)kernel, grid, block, (void **)&params_, Kernel_traits::SMEM_BYTES, stream); } if (has_colscale) { using Kernel_traits_f = layer_norm::Kernel_traits_finalize<HIDDEN_SIZE, weight_t, input_t, residual_t, output_t, compute_t, index_t, true, 32 * 32, BYTES_PER_LDG_FINAL>; auto kernel_f= &layer_norm::ln_bwd_finalize_kernel<Kernel_traits_f, true, IsEvenColsConst>; } else { using Kernel_traits_f = layer_norm::Kernel_traits_finalize<HIDDEN_SIZE, weight_t, input_t, residual_t, output_t, compute_t, index_t, false, 32 * 32, BYTES_PER_LDG_FINAL>; auto kernel_f = &layer_norm::ln_bwd_finalize_kernel<Kernel_traits_f, false, IsEvenColsConst>; } kernel_f<<<Kernel_traits_f::CTAS, Kernel_traits_f::THREADS_PER_CTA, 0, stream>>>(launch_params.params); }(); } else { constexpr bool IsEvenColsConst = false; return [&] { if (has_colscale) { auto kernel = &ln_bwd_kernel<Kernel_traits, IsDropoutConst, true, HasSubsetConst, IsEvenColsConst>; } else { auto kernel = &ln_bwd_kernel<Kernel_traits, IsDropoutConst, false, HasSubsetConst, IsEvenColsConst>; } if( configure_params ) { int ctas_per_sm; { check_cuda_((cudaOccupancyMaxActiveBlocksPerMultiprocessor( &ctas_per_sm, kernel, Kernel_traits::THREADS_PER_CTA, Kernel_traits::SMEM_BYTES)), "D:\\projects\\affect\\TUCORE-GCN\\.venv\\Lib\\site-packages\\layer_norm\\ln_bwd_kernels.cuh", 553); }; launch_params.params.ctas_per_col = launch_params.props->multiProcessorCount * ctas_per_sm / Kernel_traits::CTAS_PER_ROW; launch_params.barrier_size = 0; launch_params.workspace_bytes = 0; if(Kernel_traits::CTAS_PER_ROW > 1) { launch_params.barrier_size = 2 * launch_params.params.ctas_per_col; launch_params.workspace_bytes = launch_params.params.ctas_per_col * Kernel_traits::WARPS_M * Kernel_traits::CTAS_PER_ROW * sizeof(typename Kernel_traits::reduce_t) * 2; } return; } if( Kernel_traits::SMEM_BYTES >= 48 * 1024 ) { { check_cuda_((cudaFuncSetAttribute(kernel, cudaFuncAttributeMaxDynamicSharedMemorySize, Kernel_traits::SMEM_BYTES)), "D:\\projects\\affect\\TUCORE-GCN\\.venv\\Lib\\site-packages\\layer_norm\\ln_bwd_kernels.cuh", 553); }; } auto stream = launch_params.stream; auto ctas_per_col = launch_params.params.ctas_per_col; if( Kernel_traits::CTAS_PER_ROW == 1 ) { kernel<<<ctas_per_col, Kernel_traits::THREADS_PER_CTA, Kernel_traits::SMEM_BYTES, stream>>>(launch_params.params); } else { dim3 grid(Kernel_traits::CTAS_PER_ROW * ctas_per_col); dim3 block(Kernel_traits::THREADS_PER_CTA); void *params_ = (void *)&launch_params.params; cudaLaunchCooperativeKernel((void *)kernel, grid, block, (void **)&params_, Kernel_traits::SMEM_BYTES, stream); } if (has_colscale) { using Kernel_traits_f = layer_norm::Kernel_traits_finalize<HIDDEN_SIZE, weight_t, input_t, residual_t, output_t, compute_t, index_t, true, 32 * 32, BYTES_PER_LDG_FINAL>; auto kernel_f= &layer_norm::ln_bwd_finalize_kernel<Kernel_traits_f, true, IsEvenColsConst>; } else { using Kernel_traits_f = layer_norm::Kernel_traits_finalize<HIDDEN_SIZE, weight_t, input_t, residual_t, output_t, compute_t, index_t, false, 32 * 32, BYTES_PER_LDG_FINAL>; auto kernel_f = &layer_norm::ln_bwd_finalize_kernel<Kernel_traits_f, false, IsEvenColsConst>; } kernel_f<<<Kernel_traits_f::CTAS, Kernel_traits_f::THREADS_PER_CTA, 0, stream>>>(launch_params.params); }(); } }(); }(); } }(); }(); } }();s